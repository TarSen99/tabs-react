{"version":3,"sources":["components/Tab.js","components/TextField.js","components/Tabs.js","App.js","serviceWorker.js","index.js"],"names":["Tab","props","react_default","a","createElement","className","isActive","onClick","handleClick","title","toUpperCase","slice","TextField","content","Tabs","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","activeTitleID","data","id","bind","assertThisInitialized","getActiveTabContent","setState","_this2","_this$props$data$find","find","item","console","log","_this3","ActiveTabContent","map","tab","key","React","Component","App","tabsArray","fetch","then","response","json","Tabs_Tabs","tabs","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAEe,SAASA,EAAIC,GAC1B,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAW,OAASJ,EAAMK,SAAW,eAAiB,IACtDC,QAASN,EAAMO,aAEdP,EAAMQ,MAAM,GAAGC,cAAgBT,EAAMQ,MAAME,MAAM,ICNzC,SAASC,EAAUX,GAChC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZJ,EAAMY,aCDQC,cACnB,SAAAA,EAAYb,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMjB,KAEDqB,MAAQ,CACXC,cAAeR,EAAKd,MAAMuB,KAAK,GAAGC,IAGpCV,EAAKP,YAAcO,EAAKP,YAAYkB,KAAjBV,OAAAW,EAAA,EAAAX,CAAAD,IACnBA,EAAKa,oBAAsBb,EAAKa,oBAAoBF,KAAzBV,OAAAW,EAAA,EAAAX,CAAAD,IARVA,2EAWPU,GACPP,KAAKI,MAAMC,gBAAkBE,GAIhCP,KAAKW,SAAS,CACZN,cAAeE,kDAIG,IAAAK,EAAAZ,KAAAa,EACIb,KAAKjB,MAAMuB,KAAKQ,KAAK,SAAAC,GAC3C,OAAOA,EAAKR,KAAOK,EAAKR,MAAMC,gBAD1Bd,EADcsB,EACdtB,MAAOI,EADOkB,EACPlB,QAIbqB,QAAQC,IAAI1B,EAAQ,KAAOI,oCAGpB,IAAAuB,EAAAlB,KACHmB,EAAmBnB,KAAKjB,MAAMuB,KAAKQ,KAAK,SAAAC,GAC1C,OAAOA,EAAKR,KAAOW,EAAKd,MAAMC,gBAC7BV,QAEH,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZa,KAAKjB,MAAMuB,KAAKc,IAAI,SAAAC,GACnB,OAAOrC,EAAAC,EAAAC,cAACJ,EAAD,CACLwC,IAAKD,EAAId,GACTnB,SAAUiC,EAAId,KAAOW,EAAKd,MAAMC,cAChCd,MAAO8B,EAAI9B,MACXD,YAAa,kBAAM4B,EAAK5B,YAAY+B,EAAId,SAG5CvB,EAAAC,EAAAC,cAACQ,EAAD,CAAWC,QAASwB,IAEpBnC,EAAAC,EAAAC,cAAA,UACEG,QAASW,KAAKU,oBACdvB,UAAU,gBAFZ,0BA/C0BoC,IAAMC,WCAnBC,qBACnB,SAAAA,EAAY1C,GAAO,IAAAc,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAyB,IACjB5B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2B,GAAAtB,KAAAH,KAAMjB,KAEDqB,MAAQ,CACXsB,UAAW,IAJI7B,mFAQC,IAAAe,EAAAZ,KAClB2B,MAAM,mDACHC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAAAtB,GAAI,OAAIM,EAAKD,SAAS,CAACe,UAAWpB,uCAI1C,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEXa,KAAKI,MAAMsB,UAAUN,IAAI,SAAAL,GACvB,OAAO/B,EAAAC,EAAAC,cAAC6C,EAAD,CACLT,IAAKP,EAAKR,GACVD,KAAMS,EAAKiB,iBAtBQR,cCQbS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,KAAK,SAAAkB,GACjCA,EAAaC","file":"static/js/main.190d6f79.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Tab(props) {\r\n  return (\r\n    <div\r\n      className={'tab' + (props.isActive ? ' tab--active' : '')}\r\n      onClick={props.handleClick}\r\n    >\r\n      {props.title[0].toUpperCase() + props.title.slice(1)}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function TextField(props) {\r\n  return (\r\n    <div className=\"text-field\">\r\n      {props.content}\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Tab from './Tab';\r\nimport TextField from './TextField';\r\n\r\nexport default class Tabs extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      activeTitleID: this.props.data[0].id,\r\n    };\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.getActiveTabContent = this.getActiveTabContent.bind(this);\r\n  }\r\n\r\n  handleClick(id) {\r\n    if(this.state.activeTitleID === id) {\r\n      return;\r\n    }\r\n\r\n    this.setState({\r\n      activeTitleID: id,\r\n    });\r\n  }\r\n\r\n  getActiveTabContent() {\r\n   const {title, content} = this.props.data.find(item => {\r\n      return item.id === this.state.activeTitleID\r\n    });\r\n\r\n    console.log(title + '\\n' + content);\r\n  }\r\n\r\n  render() {\r\n    let ActiveTabContent = this.props.data.find(item => {\r\n      return item.id === this.state.activeTitleID\r\n    }).content;\r\n\r\n    return (\r\n      <div className=\"tabs\">\r\n        {this.props.data.map(tab => {\r\n          return <Tab\r\n            key={tab.id}\r\n            isActive={tab.id === this.state.activeTitleID}\r\n            title={tab.title}\r\n            handleClick={() => this.handleClick(tab.id)}\r\n          />\r\n        })}\r\n        <TextField content={ActiveTabContent} />\r\n\r\n        <button\r\n          onClick={this.getActiveTabContent}\r\n          className=\"tabs__button\"\r\n        >\r\n          Get active Tab\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Tabs from './components/Tabs';\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      tabsArray: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://tarsen99.github.io/tabs-react/data.json')\r\n      .then((response) => response.json())\r\n      .then(data => this.setState({tabsArray: data}));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        {\r\n          this.state.tabsArray.map(item => {\r\n            return <Tabs\r\n              key={item.id}\r\n              data={item.tabs}\r\n            />\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}